
AVRASM ver. 2.2.7  C:\Users\roanm\Google Drive\School\Fall 2017\Computer Architechure\ca_final\src\main.asm Wed Jan 03 17:24:27 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\roanm\Google Drive\School\Fall 2017\Computer Architechure\ca_final\src\main.asm(14): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328Pdef.inc'
C:\Users\roanm\Google Drive\School\Fall 2017\Computer Architechure\ca_final\src\main.asm(16): Including file '..\include\macros.inc'
C:\Users\roanm\Google Drive\School\Fall 2017\Computer Architechure\ca_final\src\main.asm(180): Including file '..\include\LCD-lib.asm'
..\include\LCD-lib.asm(77): warning: .def: 'temp_r16' redefinition (r16->r16)
C:\Users\roanm\Google Drive\School\Fall 2017\Computer Architechure\ca_final\src\main.asm(180): '..\include\LCD-lib.asm' included form here
..\include\LCD-lib.asm(77): warning: Register r16 already defined by the .DEF directive
C:\Users\roanm\Google Drive\School\Fall 2017\Computer Architechure\ca_final\src\main.asm(180): '..\include\LCD-lib.asm' included form here
C:\Users\roanm\Google Drive\School\Fall 2017\Computer Architechure\ca_final\src\main.asm(288): Including file '..\include\timer_fxns.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\roanm\Google Drive\School\Fall 2017\Computer Architechure\ca_final\src\main.asm(14): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328Pdef.inc'
C:\Users\roanm\Google Drive\School\Fall 2017\Computer Architechure\ca_final\src\main.asm(16): Including file '..\include\macros.inc'
C:\Users\roanm\Google Drive\School\Fall 2017\Computer Architechure\ca_final\src\main.asm(180): Including file '..\include\LCD-lib.asm'
C:\Users\roanm\Google Drive\School\Fall 2017\Computer Architechure\ca_final\src\main.asm(288): Including file '..\include\timer_fxns.inc'
                                 
                                 ;- main.asm --------------------------------------------------------------------
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;
                                 ;  Desription:  Main source for a clock functioning on an ATMega328P and LCD
                                 ;               Keypad Sheild
                                 ;  Author:      Roan Martin-Hayden <roanmh@gmail.com>
                                 ;  Date:        Dec 2017
                                 ; Note: Much of the ADC Setup Code is based off of work by Mick Walters
                                 ;-------------------------------------------------------------------------------
                                 
                                 
                                 
                                 ;;; Includes (Non-Function)
                                   .list
                                   .include "macros.inc"
                                 
                                 ;
                                 ; Desription:  Collection of macros for clock program.
                                 ; Author:      Roan Martin-Hayden <roanmh@gmail.com>
                                 ;               [Except where otherwise noted]
                                 ; Date:        Dec 2017
                                 ;-------------------------------------------------------------------------------
                                 
                                 ;----------------------------------------------------------------------------
                                 ; Name:     init_sp
                                 ; Purpose:  Initialize Stack Pointer to end of device's RAM
                                 ; Args:     None
                                 ; Notes:    Does not conserve value of r16
                                 ; Author:   Mick Walters
                                   .macro init_sp
                                                 ldi r16,low(RAMEND)
                                                 out SPL,r16
                                                 ldi r16,high(RAMEND)
                                                 out SPH,r16
                                   .endmacro
                                 
                                 ;----------------------------------------------------------------------------
                                 ; Name:     int_div
                                 ; Purpose:  Perform integer division
                                 ; Args:     0 - Dividend Register
                                 ;           1 - Divisor Register -> Remainder Register
                                 ;           2 - -> Quotient Register
                                 ; Notes:    Does not conserve value of r16
                                 ; Author:   Mick Walters
                                   .macro int_div
                                                 clr @2
                                 int_div_loop:   cp @0, @1
                                                 brlt int_div_done
                                                 inc @2
                                                 sub @0, @1
                                                 jmp int_div_loop
                                 int_div_done:
                                   .endmacro
                                 
                                 ;----------------------------------------------------------------------------
                                 ; Name:     hex_to_dec_str_one_dig
                                 ; Purpose:  Convert a number to a NULL terminated ASCII representation with one
                                 ;           digit.
                                 ; Args:     0 - Register to convert. (16 <= r <= 31) Register is resotored
                                 ;               after operation.
                                 ;           1 - Address to store at in SRAM (needs 3 bytes for string.)
                                 ; Notes:    Decimal String -> Address pointed to by Arg 1
                                   .macro hex_to_dec_str_one_dig
                                                 push @0
                                                   cpi @0, 9
                                                   brge hex_to_letter_out_of_range
                                                   subi @0, -0x30                   ; Ones Place
                                                   jmp hex_to_letter_store
                                 hex_to_letter_out_of_range:
                                                   ldi @0, '#'
                                 hex_to_letter_store:
                                                   push XL
                                                     push XH
                                                       ldi XH, high(@1)                 ; Z = Code/Flash memory address of
                                                       ldi XL, low(@1)                  ; Message to be displayed
                                                       st X+, @0
                                                       clr @0
                                                       st X, @0                  ; Terminating Zero
                                                     pop XH
                                                   pop XL
                                                 pop @0
                                 .endmacro
                                 ;----------------------------------------------------------------------------
                                 ; Name:     hex_to_dec_str_two_dig
                                 ; Purpose:  Convert a number to a NULL terminated ASCII representation with two
                                 ;           digits.
                                 ; Args:     0 - Register to convert. (16 <= r <= 31) Register is resotored
                                 ;               after operation.
                                 ;           1 - Address to store at in SRAM (needs 3 bytes for string.)
                                 ; Notes:    Decimal String -> Address pointed to by Arg 1
                                   .macro hex_to_dec_str_two_dig
                                                 push @0
                                                   push r16
                                                     push r17
                                                       cpi @0, $64
                                                       brge hex_to_letter_out_of_range
                                                       ldi r17, 10
                                                       int_div @0, r17, r16
                                                       subi r16, -0x30                   ; Tens Place
                                                       subi @0, -0x30                   ; Ones Place
                                                       jmp hex_to_letter_store
                                 hex_to_letter_out_of_range:
                                                       ldi r17, '#'
                                                       ldi r16, '#'
                                 hex_to_letter_store:
                                                       push XL
                                                         push XH
                                                           ldi XH, high(@1)                 ; Z = Code/Flash memory address of
                                                           ldi XL, low(@1)                  ; Message to be displayed
                                                           st X+, r16
                                                           st X+, @0
                                                           clr r17
                                                           st X, r17                  ; Terminating Zero
                                                         pop XH
                                                       pop XL
                                                     pop r17
                                                   pop r16
                                                 pop @0
                                 .endmacro
                                 
                                 ;----------------------------------------------------------------------------
                                 ; Name:     incr_time
                                 ; Purpose:  Increment a set of registers to represent a hundreth of a second
                                 ;           passing.
                                 ; Args:     0 - Tenth Second Register
                                 ;           1 - Second Register
                                 ;           2 - Minute Register
                                 ;           3 - Hour Register
                                   .macro incr_time              ;TODO: Fix overflow (no 00 seem on secs)
                                                                 ;TODO: Fix how it seems to top out
                                                 cpi @0, 9
                                                 brge incr_time_carry_sec
                                                 inc @0
                                                 jmp incr_time_end
                                 incr_time_carry_sec:
                                                 clr @0
                                                 cpi @1, 59
                                                 brge incr_time_carry_min
                                                 inc @1
                                                 jmp incr_time_end
                                 incr_time_carry_min:
                                                 clr @1
                                                 cpi @2, 59
                                                 brge incr_time_carry_hour
                                                 inc @2
                                                 jmp incr_time_end
                                 incr_time_carry_hour:
                                                 clr @2
                                                 cpi @3, 23
                                                 brge incr_time_overflow
                                                 inc @3
                                                 jmp incr_time_end
                                 incr_time_overflow:
                                                 clr @3
                                 incr_time_end:
                                   .endmacro
                                 
                                 ;----------------------------------------------------------------------------
                                 ; Name:     disp_from_cm
                                 ; Purpose:  Display a NULL terminated string from program memory
                                 ; Args:     0 - (Flash) Memory Address of NULL terminated string
                                 ;           1 - LCD Address
                                 ; Note:     Uses r16 and Z, but restores them as well
                                   .macro disp_from_pm
                                   	            push r16
                                                   push ZL
                                                     push ZH
                                                       ldi ZH, high(@0) ; Z = Code/Flash memory address of
                                                       ldi ZL, low(@0)  ;     message to be displayed
                                                       ldi r16, @1      ; r16 = line 1 LCD address
                                                       call lcd_write_string_4d
                                                     pop r16
                                                   pop ZH
                                                 pop ZL
                                   .endmacro
                                 
                                 ;----------------------------------------------------------------------------
                                 ; Name:     disp_from_sram
                                 ; Purpose:  Display a NULL terminated string from program memory.
                                 ; Args:     0 - (SRAM) Memory Address of NULL terminated string
                                 ;           1 - LCD Address
                                 ; Note:     Uses r16 and Z, but restores them as well
                                   .macro disp_from_sram
                                               	push r16
                                                   push XL
                                                     push XH
                                                       ldi XH, high(@0) ; Z = Code/Flash memory address of
                                                       ldi XL, low(@0)  ;     message to be displayed
                                                       ldi r16, @1      ; r16 = line 1 LCD address
                                                       call lcd_write_string_4d_mem
                                                     pop XH
                                                   pop XL
                                                 pop r16
                                   .endmacro
                                 
                                 ;----------------------------------------------------------------------------
                                 ; Name:     disp_from_sram_app
                                 ; Purpose:  Display a NULL terminated string from program memory at the
                                 ;           current cursor location
                                 ; Args:     0 - (SRAM) Memory Address of NULL terminated string
                                 ; Note:     Uses r16 and Z, but restores them as well
                                  	.macro disp_from_sram_append
                                                 push XL
                                                   push XH
                                                     ldi XH, high(@0) ; Z = Code/Flash memory address of
                                                     ldi XL, low(@0)  ;     message to be displayed
                                                     call lcd_append_string_4d_mem
                                                   pop XH
                                                 pop XL
                                   .endmacro
                                 
                                 ;----------------------------------------------------------------------------
                                 ; Name:     load_addr
                                 ; Purpose:  Load an adress into a lettered register.
                                 ; Args:     0 - Register to load the address into
                                 ;           1 - Address to load
                                   .macro load_addr
                                 	              ldi @0L, low(@1)
                                 	              ldi @0H, high(@1)
                                   .endmacro
                                 
                                 
                                 ;;; Definitions
                                   ;; Register Definitions
                                   .def temp_r16     =r16            ; Included in LCD-lib.asm
                                   .def temp_r17     = r17
                                   .def tnth_sec_reg = r18
                                   .def sec_reg      = r19
                                   .def min_reg      = r20
                                   .def hour_reg     = r21
                                   .def adc_res      = r22
                                   .def time_set     = r23
                                   .def btn_prs      = r24
                                   .def sts_reg      = r25
                                 
                                 
                                   ;; Contstant Definitions
                                 
                                   ;; Program Status Register
                                   ;; .equ time_set = 0
                                   ;; .equ btn_prs  = 1
                                   .equ dsp_upd  = 2
                                 
                                   ; Output Compare Register
                                   .equ ocr_low  = $FF
                                   .equ ocr_high = $5F
                                 
                                   ; 16bit Timer Waveform Generation Mode
                                   ;.equ t16wgm_hi = (0b00 << WGM12)   ; Normal Mode
                                   ;.equ t16wgm_lo = (0b00 << WGM10)
                                   .equ t16wgm_hi = (0b01 << WGM12)   ; CTC Mode
                                   .equ t16wgm_lo = (0b00 << WGM10)
                                 
                                   ; 16bit Timer Clock Select
                                   ;; .equ t16cs = (0b001 << CS10)  ; ClkIO x1 (no prescale)
                                   .equ t16cs = (0b011 << CS10)  ; ClkIO x8
                                 
                                   ; 16Bit Timer Interrupt Mask
                                   ;.equ t16im = (0b1 << TOIE1)   ; Overflow Interupt Enable
                                   .equ t16im = (0b1 << OCIE1A)   ; Output Compare Register A Int. En.
                                 
                                   ; Power Reduction Register
                                   .equ prr_startup = 0b11111110     ; Turn on ADC
                                 
                                   ;; ADC Multiplexer Selection Register
                                   .equ adc_mul_sel = (0b01 << REFS0) + (1 << ADLAR) + (0 << MUX0)
                                 
                                   ;; Digital Input Disable Register
                                   .equ di_dis_startup = (1 << ADC0D)
                                 
                                   ;; External Interrupt Control Register A
                                   .equ ext_int_ctrl_a = (0b11 << ISC00)
                                 
                                   ;; External Interrupt Mask Register
                                   .equ ext_int_msk = $00
                                 
                                   ;; ADC Control and Status Register A
                                   .equ adc_ctrl_a = (0b1 << ADEN) + (0b1 << ADSC) + (0b1 << ADATE) + (0b1 << ADIE) + (0b111 << ADPS0)
                                 
                                   ;; ADC Control and Status Register B
                                   .equ adc_ctrl_b = $00
                                 
                                   ;Display Location Constants
                                   .equ clk_hr_loc   = 0x00
                                   .equ clk_cln1_loc = 0x02
                                   .equ clk_mn_loc   = 0x03
                                   .equ clk_cln2_loc = 0x05
                                   .equ clk_sc_loc   = 0x06
                                 
                                 ;;; Static Variables
                                   .dseg
                                 
                                   ;; Time Value Strings: Null terminated ASCII strings of each time value
                                   ;; Note: See "" for programed string values
000100                           ten_sec_str:   .byte 3
000103                           sec_str:       .byte 3
000106                           min_str:       .byte 3
000109                           hour_str:      .byte 3
                                 
                                 ;;; Interupt Vectors
                                   .cseg
                                   .org 0x0000
000000 940c 011e                                 jmp RESET        ; Reset Interupt Vecotor
                                   .org 0x0016
000016 940c 0034                                 jmp TIMER1_OVR   ; Timer Output Compare Interupt
                                   .org 0x001A
00001a 940c 0034                                 jmp TIMER1_OVR   ; Timer Overflow Interupt Vector
                                   .org 0x002A
00002a 940c 0050                                 jmp ADC_INT      ; ADC Conversion Complete Interrupt
                                 
                                 
                                 
                                 ;;; Interupt Service Routines
                                   .org INT_VECTORS_SIZE         ; Start Rest of code after Interupt Vectors
                                 
                                   ;; Timer Overflow Interupt
                                   .cseg                         ; This seems needed to avoid errors
000034 3070                      TIMER1_OVR:     cpi time_set, 0
000035 f4c9                                      brne TIMER1_OVR_END
000036 3029
000037 f41c
000038 9523
000039 940c 004e
00003b 2722
00003c 333b
00003d f41c
00003e 9533
00003f 940c 004e
000041 2733
000042 334b
000043 f41c
000044 9543
000045 940c 004e
000047 2744
000048 3157
000049 f41c
00004a 9553
00004b 940c 004e
00004d 2755                                      incr_time tnth_sec_reg, sec_reg, min_reg, hour_reg
00004e 6094                                      ori sts_reg, (1 << dsp_upd)
00004f 9518                      TIMER1_OVR_END: reti
                                 
                                   ;; ADC Conversion Complete Interupt
000050 9160 0079                 ADC_INT:        lds adc_res, ADCH ; Load ADC Result High bit to register
                                 
000052 3f60                                      cpi adc_res, 240 ; No button is pressed if adc_res is higher
000053 f010                                      brlo ADC_B1
000054 2788                                      clr btn_prs
000055 9518                                      reti            ; Take no action
                                 
000056 3080                      ADC_B1:         cpi btn_prs, 0
000057 f551                                      brne ADC_UPD_DISP
000058 9478                                      sei              ; Enable interupts because this is lower
                                                                  ; priority than time keeping
000059 386c                                      cpi adc_res, 140 ; Button 1 is pressed if  adc_res is higher
00005a f028                                      brlo ADC_B2
                                 
00005b e001                                      ldi temp_r16, 1 ; time_set[0]=0->1 or time_set[0]=1->0
00005c 2770                                      eor time_set, temp_r16
00005d e081                                      ldi btn_prs, 1
00005e 940c 0082                                 jmp ADC_UPD_DISP
                                 
000060 356a                      ADC_B2:         cpi adc_res, 90 ; Button 2 is pressed if  adc_res is higher
000061 f038                                      brlo ADC_B3
000062 9553                                      inc hour_reg
000063 3158                                      cpi hour_reg, 24
000064 f00c                                      brlt ADC_B2_1
000065 2755                                      clr hour_reg
000066 e081                      ADC_B2_1:       ldi btn_prs, 1
000067 940c 0082                                 jmp ADC_UPD_DISP
                                 
000069 3367                      ADC_B3:         cpi adc_res, 55 ; Button 3 is pressed if  adc_res is higher
00006a f038                                      brlo ADC_B4
00006b 9543                                      inc min_reg
00006c 334c                                      cpi min_reg, 60
00006d f00c                                      brlt ADC_B3_1
00006e 2744                                      clr min_reg
00006f e081                      ADC_B3_1:       ldi btn_prs, 1
000070 940c 0082                                 jmp ADC_UPD_DISP
                                 
000072 3164                      ADC_B4:         cpi adc_res, 20 ; Button 3 is pressed if  adc_res is higher
000073 f038                                      brlo ADC_B5
000074 5f46                                      subi min_reg, -10
000075 334c                                      cpi min_reg, 60
000076 f00c                                      brlt ADC_B4_1
000077 534c                                      subi min_reg, 60
000078 e081                      ADC_B4_1:       ldi btn_prs, 1
000079 940c 0082                                 jmp ADC_UPD_DISP
                                 
00007b 3030                      ADC_B5:         cpi sec_reg, 0
                                 
00007c f019                                      breq ADC_B5_2
00007d 2733                                      clr sec_reg
00007e 940c 0081                                 jmp ADC_B5_3
000080 e13e                      ADC_B5_2:       ldi sec_reg, 30
000081 e081                      ADC_B5_3:       ldi btn_prs, 1
                                 
000082 9518                      ADC_UPD_DISP:   reti
                                 
                                 
                                 ;;; Startup Routine
                                   .cseg
                                   	.include "LCD-lib.asm"
                                 
                                 ;   LCD-Lib.asm, based on:
                                 ;   LCD-AVR-4d.asm - Use an HD44780U based LCD with an Atmel ATmega processor
                                 ;
                                 ;   Copyright (C) 2013 Donald Weiman    (weimandn@alfredstate.edu)
                                 ;
                                 ;   This program is free software: you can redistribute it and/or modify
                                 ;   it under the terms of the GNU General Public License as published by
                                 ;   the Free Software Foundation, either version 3 of the License, or
                                 ;   (at your option) any later version.
                                 ;
                                 ;   This program is distributed in the hope that it will be useful,
                                 ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
                                 ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                 ;   GNU General Public License for more details.
                                 ;
                                 ;   You should have received a copy of the GNU General Public License
                                 ;   along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                 ;
                                 ; ***************************************************************************
                                 ;        File:    LCD-AVR-4d.asm
                                 ;        Date:    September 8, 2013
                                 ;
                                 ;      Target:    ATmega328p
                                 ;   Assembler:    avra Avr Assembler
                                 ;      Author:    Donald Weiman
                                 ;     
                                 ;    Modified:    M. L. Walters, Nov 2017
                                 ;
                                 ;    Hardware:    Arduino, Boarduino, Xplained Mini or equivalent, LCD Module
                                 ;
                                 ;     Summary:    4-bit data interface, busy flag not implemented.
                                 ;                 Any LCD pin can be connected to any available I/O port.
                                 ;                 Includes a simple write string routine.
                                 ;
                                 ; ****************************** Program Notes ******************************
                                 ;
                                 ;           This program uses a 4-bit data interface but does not use the
                                 ;             busy flag to determine when the LCD controller is ready.  The
                                 ;             LCD RW line (pin 5) is not connected to the uP and it must be
                                 ;             connected to GND for the program to function.
                                 ;
                                 ;           All time delays are longer than those specified in most datasheets
                                 ;             in order to accommodate slower than normal LCD modules.  This
                                 ;             requirement is well documented but almost always ignored.  The
                                 ;             information is in a note at the bottom of the right hand
                                 ;             (Execution Time) column of the instruction set.
                                 ;
                                 ; ***************************************************************************
                                 ;
                                 ;           The four data lines as well as the two control lines may be
                                 ;             implemented on any available I/O pin of any port.  These are
                                 ;             the connections used for this program:
                                 ;
                                 ;                -----------                   ----------
                                 ;               | ATmega328 |                 |   LCD    |
                                 ;               |           |                 |          |
                                 ;               |        PD7|---------------->|D7        |
                                 ;               |        PD6|---------------->|D6        |
                                 ;               |        PD5|---------------->|D5        |
                                 ;               |        PD4|---------------->|D4        |
                                 ;               |           |                 |D3        |
                                 ;               |           |                 |D2        |
                                 ;               |           |                 |D1        |
                                 ;               |           |                 |D0        |
                                 ;               |           |                 |          |
                                 ;               |        PB1|---------------->|E         |
                                 ;               |           |         GND --->|RW        |
                                 ;               |        PB0|---------------->|RS        |
                                 ;                -----------                   ----------
                                 ;
                                 ; ***************************************************************************
                                 
                                 .equ    fclk = 16000000      ; system clock frequency (for delays)
                                 
                                 ; register usage
                                 .def    temp_r16 = r16     ; temporary storage
                                 
                                 ; LCD interface (should agree with the diagram above)
                                 ;   make sure that the LCD RW pin is connected to GND
                                 .equ    lcd_D7_port = PORTD         ; lcd D7 connection
                                 .equ    lcd_D7_bit  = PORTD7
                                 .equ    lcd_D7_ddr  = DDRD
                                 
                                 .equ    lcd_D6_port = PORTD         ; lcd D6 connection
                                 .equ    lcd_D6_bit  = PORTD6
                                 .equ    lcd_D6_ddr  = DDRD
                                 
                                 .equ    lcd_D5_port = PORTD         ; lcd D5 connection
                                 .equ    lcd_D5_bit  = PORTD5
                                 .equ    lcd_D5_ddr  = DDRD
                                 
                                 .equ    lcd_D4_port  = PORTD         ; lcd D4 connection
                                 .equ    lcd_D4_bit   = PORTD4
                                 .equ    lcd_D4_ddr   = DDRD
                                 
                                 .equ    lcd_E_port   = PORTB         ; lcd Enable pin
                                 .equ    lcd_E_bit    = PORTB1
                                 .equ    lcd_E_ddr    = DDRB
                                 
                                 .equ    lcd_RS_port  = PORTB         ; lcd Register Select pin
                                 .equ    lcd_RS_bit   = PORTB0
                                 .equ    lcd_RS_ddr   = DDRB
                                 
                                 ; LCD module information
                                 .equ    lcd_LineOne         = 0x00          ; start of line 1
                                 .equ    lcd_LineTwo         = 0x40          ; start of line 2
                                 ;.equ   lcd_LineThree        = 0x14          ; start of line 3 (20x4)
                                 ;.equ   lcd_lineFour         = 0x54          ; start of line 4 (20x4)
                                 ;.equ   lcd_LineThree        = 0x10          ; start of line 3 (16x4)
                                 ;.equ   lcd_lineFour         = 0x50          ; start of line 4 (16x4)
                                 
                                 ; LCD instructions
                                 .equ    lcd_Clear           = 0b00000001    ; replace all characters with ASCII 'space'
                                 .equ    lcd_Home            = 0b00000010    ; return cursor to first position on first line
                                 .equ    lcd_EntryMode       = 0b00000110    ; shift cursor from left to right on read/write
                                 .equ    lcd_DisplayOff      = 0b00001000    ; turn display off
                                 .equ    lcd_DisplayOn       = 0b00001100    ; display on, cursor off, don't blink character
                                 .equ    lcd_FunctionReset   = 0b00110000    ; reset the LCD
                                 .equ    lcd_FunctionSet4bit = 0b00101000    ; 4-bit data, 2-line display, 5 x 7 font
                                 .equ    lcd_SetCursor       = 0b10000000    ; set cursor position
                                 
                                 ; ============================== 4-bit LCD Subroutines ======================
                                 ; Name:     lcd_init_4d
                                 ; Purpose:  initialize the LCD module for a 4-bit data interface
                                 ; Entry:    equates (LCD instructions) set up for the desired operation
                                 ; Exit:     no parameters
                                 ; Notes:    uses time delays instead of checking the busy flag
                                 
                                 lcd_init_4d:
                                 ; Power-up delay
000083 e604                          ldi     temp_r16, 100                       ; initial 40 mSec delay
000084 940e 0106                     call    delayTx1mS
                                 
                                 ; IMPORTANT - At this point the LCD module is in the 8-bit mode and it is expecting to receive  
                                 ;    8 bits of data, one bit on each of its 8 data lines, each time the 'E' line is pulsed.
                                 ;
                                 ;  Since the LCD module is wired for the 4-bit mode, only the upper four data lines are connected to 
                                 ;    the microprocessor and the lower four data lines are typically left open.  Therefore, when 
                                 ;    the 'E' line is pulsed, the LCD controller will read whatever data has been set up on the upper 
                                 ;    four data lines and the lower four data lines will be high (due to internal pull-up circuitry).
                                 ;
                                 ;  Fortunately the 'FunctionReset' instruction does not care about what is on the lower four bits so  
                                 ;    this instruction can be sent on just the four available data lines and it will be interpreted 
                                 ;    properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the 
                                 ;    control lines have previously been configured properly.
                                 
                                 ; configure the microprocessor pins for the data lines
000086 9a57                          sbi     lcd_D7_ddr, lcd_D7_bit          ; 4 data lines - output
000087 9a56                          sbi     lcd_D6_ddr, lcd_D6_bit
000088 9a55                          sbi     lcd_D5_ddr, lcd_D5_bit
000089 9a54                          sbi     lcd_D4_ddr, lcd_D4_bit
                                 
                                 ; configure the microprocessor pins for the control lines
00008a 9a21                          sbi     lcd_E_ddr,  lcd_E_bit           ; E line - output
00008b 9a20                          sbi     lcd_RS_ddr, lcd_RS_bit          ; RS line - output
                                 
                                 ; Set up the RS and E lines for the 'lcd_write_4' subroutine.
00008c 9828                          cbi     lcd_RS_port, lcd_RS_bit         ; select the Instruction Register (RS low)
00008d 9829                          cbi     lcd_E_port, lcd_E_bit           ; make sure E is initially low
                                 
                                 ; Reset the LCD controller.
00008e e300                          ldi     temp_r16, lcd_FunctionReset         ; first part of reset sequence
00008f 940e 00ee                     call    lcd_write_4
000091 e00a                          ldi     temp_r16, 10                        ; 4.1 mS delay (min)
000092 940e 0106                     call    delayTx1mS
                                 
000094 e300                          ldi     temp_r16, lcd_FunctionReset         ; second part of reset sequence
000095 940e 00ee                     call    lcd_write_4
000097 ec08                          ldi     temp_r16, 200                       ; 100 uS delay (min)
000098 940e 0114                     call    delayTx1uS
                                 
00009a e300                          ldi     temp_r16, lcd_FunctionReset         ; third part of reset sequence
00009b 940e 00ee                     call    lcd_write_4
00009d ec08                          ldi     temp_r16, 200                       ; this delay is omitted in the data sheet
00009e 940e 0114                     call    delayTx1uS
                                 
                                 ; Preliminary Function Set instruction - used only to set the 4-bit mode.
                                 ; The number of lines or the font cannot be set at this time since the controller is still in the 
                                 ;   8-bit mode, but the data transfer mode can be changed since this parameter is determined by one 
                                 ;   of the upper four bits of the instruction.
0000a0 e208                          ldi     temp_r16, lcd_FunctionSet4bit       ; set 4-bit mode
0000a1 940e 00ee                     call    lcd_write_4
0000a3 e500                          ldi     temp_r16, 80                        ; 40 uS delay (min)
0000a4 940e 0114                     call    delayTx1uS
                                 
                                 ; Function Set instruction
0000a6 e208                          ldi     temp_r16, lcd_FunctionSet4bit       ; set mode, lines, and font
0000a7 940e 00e3                     call    lcd_write_instruction_4d
0000a9 e500                          ldi     temp_r16, 80                        ; 40 uS delay (min)
0000aa 940e 0114                     call    delayTx1uS
                                 
                                 ; The next three instructions are specified in the data sheet as part of the initialization routine,
                                 ;   so it is a good idea (but probably not necessary) to do them just as specified and then redo them
                                 ;   later if the application requires a different configuration.
                                 
                                 ; Display On/Off Control instruction
0000ac e008                          ldi     temp_r16, lcd_DisplayOff            ; turn display OFF
0000ad 940e 00e3                     call    lcd_write_instruction_4d
0000af e500                          ldi     temp_r16, 80                        ; 40 uS delay (min)
0000b0 940e 0114                     call    delayTx1uS
                                 
                                 ; Clear Display instruction
0000b2 e001                          ldi     temp_r16, lcd_Clear                 ; clear display RAM
0000b3 940e 00e3                     call    lcd_write_instruction_4d
0000b5 e004                          ldi     temp_r16, 4                         ; 1.64 mS delay (min)
0000b6 940e 0106                     call    delayTx1mS
                                 
                                 ; Entry Mode Set instruction
0000b8 e006                          ldi     temp_r16, lcd_EntryMode             ; set desired shift characteristics
0000b9 940e 00e3                     call    lcd_write_instruction_4d
0000bb e500                          ldi     temp_r16, 80                        ; 40 uS delay (min)
0000bc 940e 0114                     call    delayTx1uS
                                 
                                 ; This is the end of the LCD controller initialization as specified in the data sheet, but the display
                                 ;   has been left in the OFF condition.  This is a good time to turn the display back ON.
                                 
                                 ; Display On/Off Control instruction
0000be e00c                          ldi     temp_r16, lcd_DisplayOn             ; turn the display ON
0000bf 940e 00e3                     call    lcd_write_instruction_4d
0000c1 e500                          ldi     temp_r16, 80                        ; 40 uS delay (min)
0000c2 940e 0114                     call    delayTx1uS
0000c4 9508                          ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 ; ---------------------------------------------------------------------------
                                 ; Name:     lcd_write_string_4d
                                 ; Purpose:  display a string of characters on the LCD
                                 ; Entry:    ZH and ZL pointing to the start of the string
                                 ;           (temp_r16) contains the desired DDRAM address at which to start the display
                                 ; Exit:     no parameters
                                 ; Notes:    the string must end with a null (0)
                                 ;           uses time delays instead of checking the busy flag
                                 
                                 lcd_write_string_4d:
                                 ; preserve registers
0000c5 93ff                          push    ZH                              ; preserve pointer registers
0000c6 93ef                          push    ZL
                                 
                                 ; fix up the pointers for use with the 'lpm' instruction
0000c7 0fee                          lsl     ZL                              ; shift the pointer one bit left for the lpm instruction
0000c8 1fff                          rol     ZH
                                 
                                 ; set up the initial DDRAM address
0000c9 6800                          ori     temp_r16, lcd_SetCursor     ; convert the plain address to a set cursor instruction
0000ca 940e 00e3                     call   lcd_write_instruction_4d     ; set up the first DDRAM address
0000cc e500                          ldi     temp_r16, 80                ; 40 uS delay (min)
0000cd 940e 0114                     call    delayTx1uS
                                 
                                 ; write the string of characters
                                 lcd_write_string_4d_01:
0000cf 9105                          lpm     temp_r16, Z+                        ; get a character
0000d0 3000                          cpi     temp_r16,  0                        ; check for end of string
0000d1 f031                          breq    lcd_write_string_4d_02          ; done
                                 
                                 ; arrive here if this is a valid character
0000d2 940e 00db                     call    lcd_write_character_4d          ; display the character
0000d4 e500                          ldi     temp_r16, 80                        ; 40 uS delay (min)
0000d5 940e 0114                     call    delayTx1uS
0000d7 cff7                          rjmp    lcd_write_string_4d_01          ; not done, send another character
                                 
                                 ; arrive here when all characters in the message have been sent to the LCD module
                                 lcd_write_string_4d_02:
0000d8 91ef                          pop     ZL                              ; restore pointer registers
0000d9 91ff                          pop     ZH
0000da 9508                          ret
                                 
                                 ; ---------------------------------------------------------------------------
                                 ; Name:     lcd_write_character_4d
                                 ; Purpose:  send a byte of information to the LCD data register
                                 ; Entry:    (temp_r16) contains the data byte
                                 ; Exit:     no parameters
                                 ; Notes:    does not deal with RW (busy flag is not implemented)
                                 
                                 lcd_write_character_4d:
0000db 9a28                          sbi     lcd_RS_port, lcd_RS_bit         ; select the Data Register (RS high)
0000dc 9829                          cbi     lcd_E_port, lcd_E_bit           ; make sure E is initially low
0000dd 940e 00ee                     call    lcd_write_4                     ; write the upper 4-bits of the data
0000df 9502                          swap    temp_r16                        ; swap high and low nibbles
0000e0 940e 00ee                     call    lcd_write_4                     ; write the lower 4-bits of the data
0000e2 9508                          ret
                                 
                                 ; ---------------------------------------------------------------------------
                                 ; Name:     lcd_write_instruction_4d
                                 ; Purpose:  send a byte of information to the LCD instruction register
                                 ; Entry:    (temp_r16) contains the data byte
                                 ; Exit:     no parameters
                                 ; Notes:    does not deal with RW (busy flag is not implemented)
                                 
                                 lcd_write_instruction_4d:
0000e3 9828                          cbi     lcd_RS_port, lcd_RS_bit ; select the Instruction Register (RS low)
0000e4 9829                          cbi     lcd_E_port, lcd_E_bit   ; make sure E is initially low
0000e5 940e 00ee                     call    lcd_write_4             ; write the upper 4-bits of the instruction
0000e7 9502                          swap    temp_r16                ; swap high and low nibbles
0000e8 940e 00ee                     call    lcd_write_4             ; write the lower 4-bits of the instruction
0000ea e004                          ldi     temp_r16, 4                  ; 1.64 mS delay (min)
0000eb 940e 0106                     call    delayTx1mS              ;
0000ed 9508                          ret
                                 
                                 ; ---------------------------------------------------------------------------
                                 ; Name:     lcd_write_4
                                 ; Purpose:  send a nibble (4-bits) of information to the LCD module
                                 ; Entry:    (temp_r16) contains a byte of data with the desired 4-bits in the upper nibble
                                 ;           (RS) is configured for the desired LCD register
                                 ;           (E) is low
                                 ;           (RW) is low
                                 ; Exit:     no parameters
                                 ; Notes:    use either time delays or the busy flag
                                 
                                 lcd_write_4:
                                 ; set up D7
0000ee 9a5f                          sbi     lcd_D7_port, lcd_D7_bit         ; assume that the D7 data is '1'
0000ef ff07                          sbrs    temp_r16, 7                         ; check the actual data value
0000f0 985f                          cbi     lcd_D7_port, lcd_D7_bit         ; arrive here only if the data was actually '0'
                                 
                                 ; set up D6
0000f1 9a5e                          sbi     lcd_D6_port, lcd_D6_bit         ; repeat for each data bit
0000f2 ff06                          sbrs    temp_r16, 6
0000f3 985e                          cbi     lcd_D6_port, lcd_D6_bit
                                 
                                 ; set up D5
0000f4 9a5d                          sbi     lcd_D5_port, lcd_D5_bit
0000f5 ff05                          sbrs    temp_r16, 5
0000f6 985d                          cbi     lcd_D5_port, lcd_D5_bit
                                 
                                 ; set up D4
0000f7 9a5c                          sbi     lcd_D4_port, lcd_D4_bit
0000f8 ff04                          sbrs    temp_r16, 4 
0000f9 985c                          cbi     lcd_D4_port, lcd_D4_bit
                                 
                                 ; write the data
                                                                             ; 'Address set-up time' (40 nS)
0000fa 9a29                          sbi     lcd_E_port, lcd_E_bit           ; Enable pin high
0000fb 940e 0119                     call    delay1uS                        ; implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
0000fd 9829                          cbi     lcd_E_port, lcd_E_bit           ; Enable pin low
0000fe 940e 0119                     call    delay1uS                        ; implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
000100 9508                          ret
                                 
                                 ; ============================== End of 4-bit LCD Subroutines ===============
                                 
                                 ; ============================== Time Delay Subroutines =====================
                                 ; Name:     delayYx1mS
                                 ; Purpose:  provide a delay of (YH:YL) x 1 mS
                                 ; Entry:    (YH:YL) = delay data
                                 ; Exit:     no parameters
                                 ; Notes:    the 16-bit register provides for a delay of up to 65.535 Seconds
                                 ;           requires delay1mS
                                 
                                 delayYx1mS:
000101 940e 010b                     call    delay1mS                        ; delay for 1 mS
000103 9721                          sbiw    YH:YL, 1                        ; update the the delay counter
000104 f7e1                          brne    delayYx1mS                      ; counter is not zero
                                 
                                 ; arrive here when delay counter is zero (total delay period is finished)
000105 9508                          ret
                                 
                                 ; ---------------------------------------------------------------------------
                                 ; Name:     delayTx1mS
                                 ; Purpose:  provide a delay of (temp_r16) x 1 mS
                                 ; Entry:    (temp_r16) = delay data
                                 ; Exit:     no parameters
                                 ; Notes:    the 8-bit register provides for a delay of up to 255 mS
                                 ;           requires delay1mS
                                 
                                 delayTx1mS:
000106 940e 010b                     call    delay1mS        ; delay for 1 mS
000108 950a                          dec     temp_r16        ; update the delay counter
000109 f7e1                          brne    delayTx1mS      ; counter is not zero
                                 
                                 ; arrive here when delay counter is zero (total delay period is finished)
00010a 9508                          ret
                                 
                                 ; ---------------------------------------------------------------------------
                                 ; Name:     delay1mS
                                 ; Purpose:  provide a delay of 1 mS
                                 ; Entry:    no parameters
                                 ; Exit:     no parameters
                                 ; Notes:    chews up fclk/1000 clock cycles (including the 'call')
                                 
                                 delay1mS:
00010b 93cf                          push    YL                              ; [2] preserve registers
00010c 93df                          push    YH                              ; [2]
00010d e9cb                          ldi     YL, low (((fclk/1000)-18)/4)    ; [1] delay counter
00010e e0df                          ldi     YH, high(((fclk/1000)-18)/4)    ; [1]
                                 
                                 delay1mS_01:
00010f 9721                          sbiw    YH:YL, 1                        ; [2] update the the delay counter
000110 f7f1                          brne    delay1mS_01                     ; [2] delay counter is not zero
                                 
                                 ; arrive here when delay counter is zero
000111 91df                          pop     YH                              ; [2] restore registers
000112 91cf                          pop     YL                              ; [2]
000113 9508                          ret                                     ; [4]
                                 
                                 ; ---------------------------------------------------------------------------
                                 ; Name:     delayTx1uS
                                 ; Purpose:  provide a delay of (temp_r16) x 1 uS with a 16 MHz clock frequency
                                 ; Entry:    (temp_r16) = delay data
                                 ; Exit:     no parameters
                                 ; Notes:    the 8-bit register provides for a delay of up to 255 uS
                                 ;           requires delay1uS
                                 
                                 delayTx1uS:
000114 940e 0119                     call    delay1uS                        ; delay for 1 uS
000116 950a                          dec     temp_r16                        ; decrement the delay counter
000117 f7e1                          brne    delayTx1uS                      ; counter is not zero
                                 
                                 ; arrive here when delay counter is zero (total delay period is finished)
000118 9508                          ret
                                 
                                 ; ---------------------------------------------------------------------------
                                 ; Name:     delay1uS
                                 ; Purpose:  provide a delay of 1 uS with a 16 MHz clock frequency
                                 ; Entry:    no parameters
                                 ; Exit:     no parameters
                                 ; Notes:    add another push/pop for 20 MHz clock frequency
                                 
                                 delay1uS:
000119 930f                          push    temp_r16                            ; [2] these instructions do nothing except consume clock cycles
00011a 910f                          pop     temp_r16                            ; [2]
00011b 930f                          push    temp_r16                            ; [2]
00011c 910f                          pop     temp_r16                            ; [2]
00011d 9508                          ret                                     ; [4]
                                 
                                 ; ============================== End of Time Delay Subroutines ==============
00011e ef0f
00011f bf0d
000120 e008
000121 bf0e                      RESET:          init_sp         ; Initialize the Stack Pointer
                                 
                                   ;; Timer Setup
                                   ;;  -Control Registers
000122 e000                                      ldi temp_r16, t16wgm_lo
000123 9300 0080                                 sts TCCR1A, temp_r16
                                 
000125 e003                                      ldi temp_r16, t16cs         ; Clock Source (Curr: x1 Prescale)
000126 6008                                      ori temp_r16, t16wgm_hi
000127 9300 0081                                 sts TCCR1B, temp_r16
                                 
000129 e000                                      ldi temp_r16, $00 ; TODO: Add constant for this
00012a 9300 0082                                 sts TCCR1C, temp_r16
                                 
                                   ;;  -Output Compare Registers
00012c e51f                                      ldi temp_r17, ocr_high
00012d ef0f                                      ldi temp_r16, ocr_low
00012e 9310 0089                                 sts OCR1AH, temp_r17
000130 9300 0088                                 sts OCR1AL, temp_r16
                                 
                                   ;;  -Interupt Mask
000132 e002                                      ldi temp_r16, t16im
000133 9300 006f                                 sts TIMSK1, temp_r16
                                 
                                   ;; Power Reduction Register
000135 7f0e                                      andi temp_r16, prr_startup
000136 9300 0064                                 sts PRR, temp_r16
                                 
                                   ;; ADC Multiplexer Selection Register
000138 e600                                      ldi temp_r16, adc_mul_sel
000139 9300 007c                                 sts ADMUX, temp_r16
                                 
                                   ;; Digital Input Disable Register
00013b e001                                      ldi temp_r16, di_dis_startup
00013c 9300 007e                                 sts DIDR0, temp_r16
                                 
                                   ;; External Interrupt Control Register A
00013e e003                                      ldi temp_r16, ext_int_ctrl_a
00013f 9300 0069                                 sts EICRA,temp_r16
                                 
                                   ;; External Interrupt Mask Register
000141 e000                                      ldi temp_r16, ext_int_msk
000142 9300 001d                                 sts EIMSK, temp_r16
                                 
                                   ;; ADC Control and Status Register A
000144 ee0f                                      ldi temp_r16, adc_ctrl_a
000145 9300 007a                                 sts ADCSRA, temp_r16
                                 
                                   ;; ADC Control and Status Register B
000147 e000                                      ldi temp_r16, adc_ctrl_b
000148 9300 007b                                 sts ADCSRB, temp_r16
                                 
                                 
00014a 940e 0083                                 call lcd_init_4d              ; Initialize LCD display for 4-bit interface
                                 
                                   ;; Clear Display Instruction
00014c e001                                      ldi temp_r16, lcd_Clear       ; r16 = clear display instruction
00014d 940e 00e3                                 call lcd_write_instruction_4d
                                 
                                 
                                   ;; Initialize Registers
00014f 2722                                      clr tnth_sec_reg
000150 2733                                      clr sec_reg
000151 2744                                      clr min_reg
000152 2755                                      clr hour_reg
000153 2766                                      clr adc_res
000154 2777                                      clr time_set
                                 				;clr sts_reg
000155 e094                      				ldi sts_reg, (1 << dsp_upd)
                                 
                                   ;; Global Interupt Enable
000156 9478                                      sei
                                 
                                   ;; Intialization of port for proper analog input
000157 ef0e                                      ldi temp_r16, 0b11111110
000158 b907                                      out DDRC,temp_r16 ; set PortC to output, ADC0 input
000159 2700                                      clr temp_r16
00015a b908                                      out PortC,temp_r16 ; set PortC to 0V
                                 
                                   ;; Waiting Loop
00015b 2f09                      wait_loop:      mov temp_r16, sts_reg
00015c 7004                                      andi temp_r16, (1 << dsp_upd)
00015d 3004                                      cpi temp_r16, (1 << dsp_upd)
00015e f7e1                                      brne wait_loop
                                 
00015f 933f
000160 930f
000161 931f
000162 3634
000163 f464
000164 e01a
000165 2700
000166 1731
000167 f024
000168 9503
000169 1b31
00016a 940c 0166
00016c 5d00
00016d 5d30
00016e 940c 0172
000170 e213
000171 e203
000172 93af
000173 93bf
000174 e0b1
000175 e0a3
000176 930d
000177 933d
000178 2711
000179 931c
00017a 91bf
00017b 91af
00017c 911f
00017d 910f
00017e 913f                                      hex_to_dec_str_two_dig sec_reg, sec_str ; Convert and store time values
00017f 934f
000180 930f
000181 931f
000182 3644
000183 f464
000184 e01a
000185 2700
000186 1741
000187 f024
000188 9503
000189 1b41
00018a 940c 0186
00018c 5d00
00018d 5d40
00018e 940c 0192
000190 e213
000191 e203
000192 93af
000193 93bf
000194 e0b1
000195 e0a6
000196 930d
000197 934d
000198 2711
000199 931c
00019a 91bf
00019b 91af
00019c 911f
00019d 910f
00019e 914f                                      hex_to_dec_str_two_dig min_reg, min_str
00019f 935f
0001a0 930f
0001a1 931f
0001a2 3654
0001a3 f464
0001a4 e01a
0001a5 2700
0001a6 1751
0001a7 f024
0001a8 9503
0001a9 1b51
0001aa 940c 01a6
0001ac 5d00
0001ad 5d50
0001ae 940c 01b2
0001b0 e213
0001b1 e203
0001b2 93af
0001b3 93bf
0001b4 e0b1
0001b5 e0a9
0001b6 930d
0001b7 935d
0001b8 2711
0001b9 931c
0001ba 91bf
0001bb 91af
0001bc 911f
0001bd 910f
0001be 915f                                      hex_to_dec_str_two_dig hour_reg, hour_str
                                 
0001bf e000                                      ldi temp_r16, $00           ; Set cursor to Begining of first line
0001c0 6800                                      ori temp_r16, lcd_SetCursor       ; convert the plain address to a set cursor instruction
0001c1 940e 00e3                                 call lcd_write_instruction_4d
                                 
0001c3 930f
0001c4 93af
0001c5 93bf
0001c6 e0b1
0001c7 e0a9
0001c8 e000
0001c9 940e 01fe
0001cb 91bf
0001cc 91af
0001cd 910f                                      disp_from_sram hour_str, clk_hr_loc
0001ce 930f
0001cf 93ef
0001d0 93ff
0001d1 e0f1
0001d2 efed
0001d3 e002
0001d4 940e 00c5
0001d6 910f
0001d7 91ff
0001d8 91ef                                      disp_from_pm colon_str, clk_cln1_loc
0001d9 930f
0001da 93af
0001db 93bf
0001dc e0b1
0001dd e0a6
0001de e003
0001df 940e 01fe
0001e1 91bf
0001e2 91af
0001e3 910f                                      disp_from_sram min_str, clk_mn_loc
0001e4 930f
0001e5 93ef
0001e6 93ff
0001e7 e0f1
0001e8 efed
0001e9 e005
0001ea 940e 00c5
0001ec 910f
0001ed 91ff
0001ee 91ef                                      disp_from_pm colon_str, clk_cln2_loc
0001ef 930f
0001f0 93af
0001f1 93bf
0001f2 e0b1
0001f3 e0a3
0001f4 e006
0001f5 940e 01fe
0001f7 91bf
0001f8 91af
0001f9 910f                                      disp_from_sram sec_str, clk_sc_loc
0001fa 7f9b                                      andi sts_reg, $FF - (1 << dsp_upd)
0001fb 940c 015b                 	            jmp wait_loop
                                 
                                 ;;; Program Constants
                                   .cseg
0001fd 003a                      colon_str:      .db ":", 0
                                 ;;; Function Libraries
                                   .cseg
                                   ;; .include "LCD-lib.asm"
                                   .include "timer_fxns.inc"
                                 
                                 ;
                                 ; Desription:  Collection of macros for clock program.
                                 ; Author:      Roan Martin-Hayden <roanmh@gmail.com>
                                 ;               [Except where otherwise noted]
                                 ; Date:        Dec 2017
                                 ;-------------------------------------------------------------------------------
                                 
                                 ;----------------------------------------------------------------------------
                                 ; Name:     lcd_write_string_4d_mem
                                 ; Purpose:  Display a string of characters on the LCD, at a given location
                                 ; Entry:    XH and XL pointing to the start of the string
                                 ;           (temp_r16) contains the desired DDRAM address at which to start the display
                                 ; Exit:     No parameters
                                 ; Notes:    The string must end with a null (0)
                                 ;           uses time delays instead of checking the busy flag
                                 lcd_write_string_4d_mem:
0001fe 930f                                      push r16        ; Preserve Registers
                                 
                                 ; set up the initial DDRAM address
0001ff 6800                                        ori r16, lcd_SetCursor     ; convert the plain address to a set cursor instruction
000200 940e 00e3                                   call lcd_write_instruction_4d    ; set up the first DDRAM address
000202 e500                                        ldi r16, 80                ; 40 uS delay (min)
000203 940e 0114                                   call delayTx1uS
                                 
000205 910f                                      pop r16
000206 940e 0209                                 call lcd_append_string_4d_mem
000208 9508                                      ret
                                 
                                 ;----------------------------------------------------------------------------
                                 ; Name:     lcd_append_string_4d_mem
                                 ; Purpose:  Display a string of characters on the LCD, at the current cursor
                                 ; Entry:    XH and XL pointing to the start of the string
                                 ; Exit:     No parameters
                                 ; Notes:    The string must end with a null (0)
                                 ;           uses time delays instead of checking the busy flag
                                 lcd_append_string_4d_mem:
000209 930f                                      push r16        ; Preserve Registers
00020a 93bf                                        push XH
00020b 93af                                          push XL
                                 
                                 ; write the string of characters
                                 lcd_write_string_4d_mem_01:
00020c 910d                                            ld r16, X+                        ; get a character
00020d 3000                                            cpi r16,  0                        ; check for end of string
00020e f031                                            breq lcd_write_string_4d_mem_02          ; done
                                 
                                 ; arrive here if this is a valid character
00020f 940e 00db                                       call lcd_write_character_4d          ; display the character
000211 e500                                            ldi r16, 80                        ; 40 uS delay (min)
000212 940e 0114                                       call delayTx1uS
000214 cff7                                            rjmp lcd_write_string_4d_mem_01          ; not done, send another character
                                 
                                 ; arrive here when all characters in the message have been sent to the LCD module
                                 lcd_write_string_4d_mem_02:
000215 91af                                          pop XL                              ; restore pointer registers
000216 91bf                                        pop XH
000217 910f                                      pop r16
000218 9508                                      ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :  10 y  :   0 z  :   1 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 123 r17:  26 r18:   4 r19:  14 r20:  17 
r21:  14 r22:   7 r23:   3 r24:   7 r25:   4 r26:  20 r27:  20 r28:   5 
r29:   5 r30:   9 r31:   9 
Registers used: 18 out of 35 (51.4%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   3 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   3 brge  :   7 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 brlt  :   6 brmi  :   0 
brne  :   7 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  46 cbi   :  10 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  21 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   3 cpc   :   0 
cpi   :  21 cpse  :   0 dec   :   2 eor   :   1 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   9 jmp   :  20 
ld    :   1 ldd   :   0 ldi   :  81 lds   :   1 lpm   :   1 lsl   :   1 
lsr   :   0 mov   :   1 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   5 out   :   4 pop   :  40 
push  :  40 rcall :   0 ret   :  12 reti  :   3 rjmp  :   2 rol   :   1 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  12 sbic  :   0 sbis  :   0 
sbiw  :   2 sbr   :   0 sbrc  :   0 sbrs  :   4 sec   :   0 seh   :   0 
sei   :   2 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   9 std   :   0 sts   :  13 
sub   :   3 subi  :   8 swap  :   2 tst   :   0 wdr   :   0 
Instructions used: 38 out of 113 (33.6%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000432    984      2    986   32768   3.0%
[.dseg] 0x000100 0x00010c      0     12     12    2048   0.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 2 warnings
